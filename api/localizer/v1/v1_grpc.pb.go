// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TunnelServiceClient is the client API for TunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelServiceClient interface {
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (TunnelService_TunnelClient, error)
}

type tunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelServiceClient(cc grpc.ClientConnInterface) TunnelServiceClient {
	return &tunnelServiceClient{cc}
}

var tunnelServiceTunnelStreamDesc = &grpc.StreamDesc{
	StreamName:    "Tunnel",
	ServerStreams: true,
	ClientStreams: true,
}

func (c *tunnelServiceClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (TunnelService_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, tunnelServiceTunnelStreamDesc, "/localizer.v1.TunnelService/Tunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelServiceTunnelClient{stream}
	return x, nil
}

type TunnelService_TunnelClient interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type tunnelServiceTunnelClient struct {
	grpc.ClientStream
}

func (x *tunnelServiceTunnelClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelServiceTunnelClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServiceService is the service API for TunnelService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterTunnelServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type TunnelServiceService struct {
	Tunnel func(TunnelService_TunnelServer) error
}

func (s *TunnelServiceService) tunnel(_ interface{}, stream grpc.ServerStream) error {
	return s.Tunnel(&tunnelServiceTunnelServer{stream})
}

type TunnelService_TunnelServer interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type tunnelServiceTunnelServer struct {
	grpc.ServerStream
}

func (x *tunnelServiceTunnelServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelServiceTunnelServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterTunnelServiceService registers a service implementation with a gRPC server.
func RegisterTunnelServiceService(s grpc.ServiceRegistrar, srv *TunnelServiceService) {
	srvCopy := *srv
	if srvCopy.Tunnel == nil {
		srvCopy.Tunnel = func(TunnelService_TunnelServer) error {
			return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "localizer.v1.TunnelService",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Tunnel",
				Handler:       srvCopy.tunnel,
				ServerStreams: true,
				ClientStreams: true,
			},
		},
		Metadata: "v1.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewTunnelServiceService creates a new TunnelServiceService containing the
// implemented methods of the TunnelService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewTunnelServiceService(s interface{}) *TunnelServiceService {
	ns := &TunnelServiceService{}
	if h, ok := s.(interface {
		Tunnel(TunnelService_TunnelServer) error
	}); ok {
		ns.Tunnel = h.Tunnel
	}
	return ns
}

// UnstableTunnelServiceService is the service API for TunnelService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableTunnelServiceService interface {
	Tunnel(TunnelService_TunnelServer) error
}
